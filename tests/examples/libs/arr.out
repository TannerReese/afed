# Test arr builtin functions

range (5 / 7) 6 = `[5 / 7, 12 / 7, 19 / 7, 26 / 7, 33 / 7, 40 / 7]`,
range 3.4 8.9 = `[3.4, 4.4, 5.4, 6.4, 7.4, 8.4]`,

range_step 89 83.2 (-1) = `[89, 88, 87, 86, 85, 84]`,

map fst $ iter [0, 1] 8 \pr: [pr 1, pr 0 + pr 1] = `[0, 1, 1, 2, 3, 5, 8, 13]`,
map arr.snd $ iter_while [1, 1] (\pr: pr 1 < 200) \pr: [1 + pr 0, pr 0 * pr 1] = `[1, 1, 2, 6, 24, 120]`,

# Test getters
len (a: [1, -2, 3, 9.3]) = `4`,
last a = `9.3`,
sum a = `11.3`,
prod a = `-55.800000000000004`,
arr.map (num.sqrt) [1, 2, 3, 4, 4/5] = `[1, 1.4142135623730951, 1.7320508075688772, 2, 0.8944271909999159]`,
filter (\x: x > 0) [1, 2, -9, 3, -8.4, -2 /13, 3/4] = `[1, 2, 3, 3 / 4]`,

any (\x: len x > 3) $ (b: [[1, 2], [2, 3], [7, 8.4, -3]]) = `false`,
all (\x: sum x > 0) b = `true`,
arr.has [2, 3] b = `true`,

max c = `3.56`,
min c = `-3 / 4`,
rev c = `[-3 / 4, 3.56, 2, 1]`,
c: [1, 2, 3.56, -3/4],
fold 0 (\acc y: (acc + y) / (1 - acc * y)) c = `-0.6776859504132231`,

# Compound operation
filter (\x: x > 0) $ map (\x: 7*x - x^2 / 2) $ arr.range 3 97
= `[33 / 2, 20, 45 / 2, 24, 49 / 2, 24, 45 / 2, 20, 33 / 2, 12, 13 / 2]`,

