# Test matrix operations

m1: M[[2, 3/5], [4, -1.2], [2/13, 0]],
m2: mat.M[[0, 1.1, 3 / 7], [-2, 0, 9], [1, 16, 1]],
m3: mat.M[[8, 4, -5 / 7], [12, 67 / 10, 4], [0, 17, 0]],
m4: M[[10, 9 /2], [15 / 13, -7/8]],
m5: M[[-1, 11], [4/5, -13]],

# Linear operations
-m2 + 3 * m3 = `M[[24, 10.9, -18 / 7], [38, 201 / 10, 3], [-1, 35, -1]]`,
2.1 * m4 - m5 / 7 = `M[[21.142857142857142, 7.87857142857143], [2.3087912087912086, 0.019642857142857073]]`,
m2 % (3/10) - m2 = `M[[0, -0.8999999999999999, -3 / 10], [21 / 10, 0, -9], [-9 / 10, -159 / 10, -9 / 10]]`,
m3 // 0.3 = `M[[26, 13, -3], [40, 22, 13], [0, 56, 0]]`,

# Matrix multiplication
m1 * m4 = `M[[269 / 13, 339 / 40], [38.61538461538461, 19.05], [20 / 13, 9 / 13]]`,
m3 * m1 = `M[[2902 / 91, 0], [3342 / 65, -0.839999999999999], [68, -20.4]]`,
m2 * m3 - m3 * m2 = `M[[21.914285714285715, 17.284285714285716, -34.31428571428572], [-33 / 5, 67.8, -4761 / 70], [234, 128.2, -628 / 7]]`,

# Application to vectors
m1 * V[1, 2] = `V[16 / 5, 1.6, 2 / 13]`,
V[8, -9, 3] * m2 * m1 = `V[257.7274725274725, -55.559999999999995]`,

# Matrix methods
m1.rows = `3`, m1.cols = `2`,
m3.row_vecs = `[V[8, 4, -5 / 7], V[12, 67 / 10, 4], V[0, 17, 0]]`, m4.col_vecs = `[V[10, 15 / 13], V[9 / 2, -7 / 8]]`,
m1.trsp = `M[[2, 4, 2 / 13], [3 / 5, -1.2, 0]]`,
m2.inv = `M[[89.20353982300891, -3.5663716814159314, -6.132743362831863], [-6.814159292035402, 0.265486725663717, 0.530973451327434], [19.823008849557535, -0.6814159292035403, -1.3628318584070807]]`,

# Matrix functions
rows m1 = `3`, cols m2 = `3`,
row_vecs m4 = `[V[10, 9 / 2], V[15 / 13, -7 / 8]]`, col_vecs m3 = `[V[8, 12, 0], V[4, 67 / 10, 17], V[-5 / 7, 4, 0]]`,
trsp m1 = `M[[2, 4, 2 / 13], [3 / 5, -1.2, 0]]`,
inv m5 = `M[[-65 / 21, -55 / 21], [-4 / 21, -5 / 21]]`,

identM 3 = `M[[1, 0, 0], [0, 1, 0], [0, 0, 1]]`,
zeroM 2 3 = `M[[0, 0, 0], [0, 0, 0]]`,

# Dimension mismatch errors
M[1, 2, 3] = `Eval Error: Expected array, but found number`,
M[[0], [1, 2]] = `Eval Error: Matrix cannot have jagged rows`,
m3 + m4 = `Eval Error: Matrix dimensions (3, 3) and (2, 2) do not match`,
m4 * m1 = `Eval Error: For matrix multiplication, 2 and 3 do not match`,
m2 * m5 = `Eval Error: For matrix multiplication, 3 and 2 do not match`,

# Matrix Unimplemented operations
m2 / m3 = `Eval Error: Binary operator / not implemented between types matrix and matrix`,
4 % m3 = `Eval Error: Binary operator % not implemented between types number and matrix`,

