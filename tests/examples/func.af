# Test user-defined functions and lambda expressions

# Variable capture
scope: {
   t: 3.56,
   f x: x + t,
},
scope.f 4 = ``,

# Multiple arguments
{
    f f x1 x2 x3 x4 : f + x1 - x2 + x3 - x4,
    f 1 2 3 4 5 = ``,
},

# Currying & Lambda expressions
{
    g x y: x - y * x^2,
	f g: \r: g (g r),
	f (g (1/10)) 2 = ``,
},

# Application operator
{
   if (2 + 2 > 4) 1 $ if (2 + 3 < 3.4) 0 $ (\x: x + x) $ 4 = ``,
   f t: t^2, f $ f $ f 1.1 = ``,
},

# Lambda expressions as arguments
{
	utils.with5 $ lamb 4.1 = ``,
	utils: { with5 f: f 5 },
    lamb: \x: \y: x + y / x,
},

# Substitutions inside functions
{
	t: 4.56,
    sub x: (3 * t = ``) + (x = ``),
	sub 2 = ``,
},

# Function unimplemented operations
{
	f x: \y: x + 1 / y,
	f + 3 = ``,
	4 * f = ``,
	f 4 3 = ``, # Works afterwards
},

# Method support
{
	num.sqrt.arity = ``,
	atan2.arity = ``,
	f.arity = ``,
	g.arity = ``,
	((\x y z: x + y + z) 3).arity = ``,

	f x: [x, x],
	g: \y: [y, 2*y],
	f.hello = ``,
	g.world = ``,
	f 2 = ``,
	g 1 = ``,
},

# Argument destructuring
{
	f [x, [_, _], {"_ a": x2}, y] : x - x2 / y,
	f [1, [0, 0], {"_ a": 3}, 2] = ``,

	# Fuzzy matching
	g {"df": x, .., h: [_, y]}: x - y,
	g {h: [1, 3], df: 2, other: "j"} = ``,

	# Lambdas
	(\{.., a: z, c: _, "b": [x, y]} : x + 2 * y + 4 * z)
	{a: 6, b: [1, 2], c: "a", d: null} = ``,

	# Check erroneous calls
	g {df: 3, other: -1} = ``,
	f [1, [2, 2], 3, 4] = ``,
	f [9, [1, 1], {"_ a": 4, n: 7}, 3] = ``,
},

# Lambda expression with internal variables
{
	f x: {v: x * 2, w: x + 1, ans: v - w}.ans,
	f 4 = ``,
	lamb x: \y: {v: y + x, w: y / 2, ans: v * w}.ans,
	lamb 1 5 = ``,
}

