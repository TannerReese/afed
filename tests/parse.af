# Test basic parsing capabilities

x   : {
	# Named map member
	y_
	:
	# Array
	[1, 2, null],
	y_ = ``,
	# String-keyed member
	"!!#!!" : 3,
	# Unnamed map member
	2,

	# Reference variable in map
	nested: {x: 4},
	{ nested.x = `4` }
},

# Escaping of delimiter and special characters
"`\\'\"\n" = ``,
"?\\?".print = ``,
# Erasure of substitution
0 = `Things
to
	be
		erased \\\\////
	$$ @ ., ^ \`\`
`,

#{
	Check that multiline comments work
	Lorem ipsum dolor sit amet, consectetur adipiscing elit,
	sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
	# Not disrupted by extra comment }# 4 = ``,

# Test deep references
a1: {a2: {a3: {a4: {a5: {a6: 2}}}}},
a1.a2.a3.a4.a5 = ``,
((a1).a2.a3.a4).a5.a6 = ``,

# Test substitution in expression
2 + ((3 + 4 = ``) - 5 = ``) = ``,

# Test variable definition in expressions
{
    2 - 6 * (x: 4 - 3 * 7 = ``) / t.y = ``,
    3 * x + (t: {z: 1 - x, y: 4}).z = ``,
    (g t: (s: f 4 5) + t) 10 * s = ``,
    7 * (f x y: x + y / x) (f 3 4) (f 5 1) = ``,
},

# Test map evaluating to its target
{ x: 54 - 9, [: x / y] = ``, y: 11 * 7 } = ``,

# Test destructuring for variable definition
{
    [x, {"a": [y, _], ..}, _, z]: [2.3, {a: ["hello", "world"], other: null}, 3, true],
	x = ``, y = ``, z = ``,
	f r s: {[rp, sp]: [2 * r - 1, s + " "], : rp * sp},
	f 2 "ab" = ``,
},

